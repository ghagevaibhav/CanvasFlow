// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String     @id @default(uuid())
//   email         String     @unique
//   password      String     @db.VarChar(80)
//   name          String
//   photo         String?
//   rooms         Room[] @relation("RoomUsers")
//   chats         Chat[]
//   adminRooms    Room[] @relation("AdminRooms")
// }
  
// model Room {
//   id          Int       @id @default(autoincrement())
//   slug        String    @unique
//   createdAt   DateTime  @default(now())
//   adminId     String
//   admin       User      @relation(fields: [adminId], references: [id], name: "AdminRooms")
//   chats       Chat[]
//   users       User[]    @relation("RoomUsers")
// }

// model Chat {
//   id        Int       @id  @default(autoincrement())
//   roomId    Int
//   message   String
//   userId    String
//   room      Room      @relation(fields: [roomId], references: [id])
//   user      User      @relation(fields: [userId], references: [id])
// }



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// nextauth js
model Account {
  id                     String   @id @default(cuid())
  userId                 String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String? @db.Text
  refresh_token_expires_in Int?
  access_token           String @db.Text
  expires_at             Int
  token_type             String?
  scope                  String?
  id_token               String? @db.Text
  session_state          String?

  @@unique([provider, providerAccountId]) // ensure unique provider and providerAccountId
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Ensure unique identifier and token
}

// Update the User model to align with NextAuth.js requirements
model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String?     @db.VarChar(80) // Keep this for local authentication
  name          String
  image         String?
  emailVerified DateTime?  // Add this field for NextAuth.js
  rooms         Room[]     @relation("RoomUsers")
  chats         Chat[]
  adminRooms    Room[]     @relation("AdminRooms")
  accounts      Account[]  // Add this for NextAuth.js
  sessions      Session[]  // Add this for NextAuth.js
}

// No changes needed for Room and Chat models
model Room {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  createdAt   DateTime  @default(now())
  adminId     String
  admin       User      @relation(fields: [adminId], references: [id], name: "AdminRooms")
  chats       Chat[]
  users       User[]    @relation("RoomUsers")
}

model Chat {
  id        Int       @id  @default(autoincrement())
  roomId    Int
  message   String
  userId    String
  room      Room      @relation(fields: [roomId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}